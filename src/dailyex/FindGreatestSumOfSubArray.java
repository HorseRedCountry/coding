package dailyex;

/**
 * 题目描述：HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常
 *        常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负
 *        数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个
 *        为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)。
 *   思路：这是一道典型的动态规划题。仔细思考一下，求一个元素的最大值，，结果就是这个元素本身；求两个元素的最大值，则需
 *       要比较第一个元素最大值+第二个元素和第二个元素的大小.....以此类推，可以总结出如下关系：
 *       F(i)=max(F(i-1)+array[i],array[i])
 *       F(i)：数组中以array[i]结尾的子数组序列的最大值
 *       biggest=max(biggest,F(i))
 *       biggest:所有子数组和的最大值
 */
public class FindGreatestSumOfSubArray {

}
